{"version":3,"sources":["components/MapContainer.tsx","api/api.ts","constants/constands.ts","utils/utils.ts","App.tsx","index.tsx"],"names":["GoogleApiWrapper","apiKey","google","initLocation","currentLocation","zoom","initialCenter","center","position","getData","url","fetch","then","response","json","days","months","lat","lng","getFormatedDate","date","day","getUTCDay","year","getUTCFullYear","month","getUTCMonth","dayNumber","getUTCDate","hours","getUTCHours","toString","minutes","getUTCMinutes","time","App","useState","setCurrentLocation","Date","setDate","people","setPeople","loadAndSetData","Promise","all","IssData","PeopleInSpaceData","currentDate","timestamp","iss_position","latitude","longitude","useEffect","interval","setInterval","clearInterval","issPeople","useMemo","filter","person","craft","className","map","key","name","length","ReactDOM","render","document","getElementById"],"mappings":"iMA4BeA,6BAAiB,CAC9BC,OAAQ,2CADKD,EAbiB,SAAC,GAA+C,IAA7CE,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBACvD,OACE,kBAAC,MAAD,CACEF,OAAQA,EACRG,KAAM,EACNC,cAAeH,EACfI,OAAQH,GAER,kBAAC,SAAD,CAAQI,SAAUJ,QCnBlBK,EAAU,SAAIC,GAClB,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCNlBC,EAAO,CAClB,SACA,SACA,UACA,YACA,WACA,SACA,YAEWC,EAAS,CACpB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGWb,EAAe,CAC1Bc,IAAK,OAAQC,KAAM,SCvBRC,EAAkB,SAACC,GAC9B,IAAMC,EAAMN,EAAKK,EAAKE,aAChBC,EAAOH,EAAKI,iBACZC,EAAQT,EAAOI,EAAKM,eACpBC,EAAYP,EAAKQ,aACnBC,EAAQT,EAAKU,cAAcC,WAC3BC,EAAUZ,EAAKa,gBAAgBF,WAYnC,OAVKF,EAAQ,KACXA,EAAK,WAAOA,KAGTG,EAAU,KACbA,EAAO,WAAOA,IAKT,CACLE,KAHQ,UAAML,EAAN,YAAeG,GAIvBX,MACAM,YACAF,QACAF,SC2DWY,G,MA7EC,WAAO,IAAD,EAC0BC,mBAASjC,GADnC,mBACbC,EADa,KACIiC,EADJ,OAEID,mBAAuBjB,EAAgB,IAAImB,OAF/C,mBAEblB,EAFa,KAEPmB,EAFO,OAGQH,mBAAmB,IAH3B,mBAGbI,EAHa,KAGLC,EAHK,KAKdC,EAAiB,WACrBC,QAAQC,IAAI,CHHPnC,EAToB,+EAapBA,EAZmB,gFGYrBG,MAAK,YAAmC,IAAD,mBAAhCiC,EAAgC,KAAvBC,EAAuB,KAChCC,EAAc,IAAIT,KAAyB,IAApBO,EAAQG,WAErCT,EAAQpB,EAAgB,IAAImB,KAAKS,KACjCV,EAAmB,CACjBpB,KAAM4B,EAAQI,aAAaC,SAC3BhC,KAAM2B,EAAQI,aAAaE,YAG7BV,EAAUK,EAAkBN,YAIlCY,qBAAU,WACRV,IACA,IAAMW,EAAWC,YACfZ,EAAgB,KAGlB,OAAO,kBAAMa,cAAcF,MAC1B,IAEH,IAAMG,EAAYC,mBAAQ,kBAAMjB,EAC7BkB,QAAO,SAAAC,GAAM,MAAqB,QAAjBA,EAAOC,WAAkB,CAACpB,IAE9C,OACE,oCACE,wBAAIqB,UAAU,eAAd,gBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,sDACA,uBAAGA,UAAU,iBAAb,qBACiBzD,EAAgBc,IADjC,wCAEgBd,EAAgBa,OAGlC,yBAAK4C,UAAU,gBACb,wDAA0BzC,EAAKc,OAC/B,qCACMd,EAAKC,IADX,aACmBD,EAAKO,UADxB,8BAEOP,EAAKK,MAFZ,YAEqBL,EAAKG,SAI9B,yBAAKsC,UAAU,aACb,6BAASA,UAAU,eACjB,kBAAC,EAAD,CACE1D,aAAcA,EACdC,gBAAiBA,KAGrB,2BAAOyD,UAAU,UACf,wBAAIA,UAAU,eACXL,EAAUM,KAAI,SAAAH,GAAM,OACnB,wBAAIE,UAAU,SAASE,IAAKJ,EAAOK,MAChCL,EAAOK,UAId,qDACoBR,EAAUS,OAD9B,yBCrEZC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.71982047.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { GoogleApiWrapper, Map, MapProps, Marker } from 'google-maps-react';\n\ninterface Location {\n  lat: number;\n  lng: number;\n}\n\ninterface OwnProps {\n  initLocation: Location;\n  currentLocation: Location;\n}\n\ntype Props = MapProps & OwnProps;\n\nconst MapContainer: FC<Props> = ({ google, initLocation, currentLocation }) => {\n  return (\n    <Map\n      google={google}\n      zoom={3}\n      initialCenter={initLocation}\n      center={currentLocation}\n    >\n      <Marker position={currentLocation} />\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBzNLo0m5oNd-ooQPAVap0XE3QkMDagYpM',\n})(MapContainer);\n","/* eslint-disable max-len */\nconst CURRENT_LOCATION_URL = 'https://cors-anywhere.herokuapp.com/http://api.open-notify.org/iss-now.json';\nconst PEOPLE_IN_SPACE_URL = 'https://cors-anywhere.herokuapp.com/http://api.open-notify.org/astros.json';\n\nconst getData = <T>(url: string): Promise<T> => {\n  return fetch(url)\n    .then(response => response.json());\n};\n\nexport const getIssData = (): Promise<IssData> => {\n  return getData(CURRENT_LOCATION_URL);\n};\n\nexport const getPeopleInSpaceData = (): Promise<PeopleData> => {\n  return getData(PEOPLE_IN_SPACE_URL);\n};\n","export const days = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'];\n\nexport const months = [\n  'Jan',\n  'Fab',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nexport const initLocation = {\n  lat: 47.444, lng: -122.176,\n};\n","import { months, days } from '../constants/constands';\n\nexport const getFormatedDate = (date: Date): FormatedDate => {\n  const day = days[date.getUTCDay()];\n  const year = date.getUTCFullYear();\n  const month = months[date.getUTCMonth()];\n  const dayNumber = date.getUTCDate();\n  let hours = date.getUTCHours().toString();\n  let minutes = date.getUTCMinutes().toString();\n\n  if (+hours < 10) {\n    hours = `0${hours}`;\n  }\n\n  if (+minutes < 10) {\n    minutes = `0${minutes}`;\n  }\n\n  const time = `${hours}:${minutes}`;\n\n  return {\n    time,\n    day,\n    dayNumber,\n    month,\n    year,\n  };\n};\n","import React, { FC, useState, useEffect, useMemo } from 'react';\nimport MapContainer from './components/MapContainer';\nimport { getIssData, getPeopleInSpaceData } from './api/api';\nimport { getFormatedDate } from './utils/utils';\nimport { initLocation } from './constants/constands';\nimport './App.css';\n\nconst App: FC = () => {\n  const [currentLocation, setCurrentLocation] = useState(initLocation);\n  const [date, setDate] = useState<FormatedDate>(getFormatedDate(new Date()));\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const loadAndSetData = () => {\n    Promise.all([getIssData(), getPeopleInSpaceData()])\n      .then(([IssData, PeopleInSpaceData]) => {\n        const currentDate = new Date(IssData.timestamp * 1000);\n\n        setDate(getFormatedDate(new Date(currentDate)));\n        setCurrentLocation({\n          lat: +IssData.iss_position.latitude,\n          lng: +IssData.iss_position.longitude,\n        });\n\n        setPeople(PeopleInSpaceData.people);\n      });\n  };\n\n  useEffect(() => {\n    loadAndSetData();\n    const interval = setInterval(\n      loadAndSetData, 5000,\n    );\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const issPeople = useMemo(() => people\n    .filter(person => person.craft === 'ISS'), [people]);\n\n  return (\n    <>\n      <h1 className=\"app-heading\">ISS Location</h1>\n      <div className=\"app\">\n        <div className=\"heading\">\n          <div className=\"map-heading\">\n            <h3>ISS is now located at:</h3>\n            <p className=\"location-info\">\n              {`longitude: ${currentLocation.lng} \n                latitude: ${currentLocation.lat}`}\n            </p>\n          </div>\n          <div className=\"date-heading\">\n            <h3>{`Current UTC time: ${date.time}`}</h3>\n            <p>\n              {`${date.day}, ${date.dayNumber}\n                 ${date.month} ${date.year}`}\n            </p>\n          </div>\n        </div>\n        <div className=\"container\">\n          <section className=\"map-wrapper\">\n            <MapContainer\n              initLocation={initLocation}\n              currentLocation={currentLocation}\n            />\n          </section>\n          <aside className=\"people\">\n            <ul className=\"people-list\">\n              {issPeople.map(person => (\n                <li className=\"person\" key={person.name}>\n                  {person.name}\n                </li>\n              ))}\n            </ul>\n            <div>\n              {`Total amount: ${issPeople.length} people on ISS`}\n            </div>\n          </aside>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}